<?phpnamespace Hakam\MultiTenancyBundle\Command;use Doctrine\Persistence\ManagerRegistry;use Exception;use Hakam\MultiTenancyBundle\Services\DbService;use Psr\EventDispatcher\EventDispatcherInterface;use Symfony\Component\Console\Application;use Symfony\Component\Console\Attribute\AsCommand;use Symfony\Component\Console\Command\Command;use Symfony\Component\Console\Exception\ExceptionInterface;use Symfony\Component\Console\Input\ArrayInput;use Symfony\Component\Console\Input\InputArgument;use Symfony\Component\Console\Input\InputInterface;use Symfony\Component\Console\Output\OutputInterface;use Symfony\Component\DependencyInjection\ContainerInterface;#[AsCommand(    name: 'tenant:database:create',    description: 'Proxy to create a new tenant database.',)]final class CreateDatabaseCommand extends Command{    use CommandTrait;    public function __construct(        private Application              $application,        private ManagerRegistry          $registry,        private ContainerInterface       $container,        private EventDispatcherInterface $eventDispatcher,        private DbService                $dbService)    {        parent::__construct();    }    protected function configure()    {        $this            ->setDescription('Create a new database for a tenant')            ->setAliases(['t:d:c'])            ->addArgument('dbName', InputArgument::REQUIRED, 'Tenant Db name to create .')            ->setHelp('This command allows you to create a new database for a tenant');    }    protected function execute(InputInterface $input, OutputInterface $output): int    {        try {            $newDbIndexId = $this->dbService->createDatabase($input->getArgument('dbName'));            // execute the current migration files on the new database            $command = new MigrateCommand($this->registry, $this->container, $this->eventDispatcher);            $arguments = [                'dbId' => $newDbIndexId,            ];            $greetInput = new ArrayInput($arguments);            $command->run($greetInput, $output);        } catch (Exception $e) {            $output->writeln($e->getMessage());            return 1;        } catch (ExceptionInterface $e) {            $output->writeln($e->getMessage());            return 1;        }        $output->writeln('Database created successfully');        return 0;    }}