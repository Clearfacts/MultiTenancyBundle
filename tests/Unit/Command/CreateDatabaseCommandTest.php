<?phpnamespace Hakam\MultiTenancyBundle\Tests\Unit\Command;use Hakam\MultiTenancyBundle\Command\CreateDatabaseCommand;use Hakam\MultiTenancyBundle\Services\DbService;use PHPUnit\Framework\TestCase;use Symfony\Component\Console\Application;use Symfony\Component\Console\Tester\CommandTester;class CreateDatabaseCommandTest extends TestCase{    private $dbService;    protected function setUp(): void    {        $this->dbService = $this->getMockBuilder(DbService::class)            ->disableOriginalConstructor()            ->getMock();    }    public function testExecute()    {        $application = new Application();        $application->add(new CreateDatabaseCommand($this->dbService));        $command = $application->find('tenant:database:create');        $commandTester = new CommandTester($command);        $dbName = 'test_db';        $this->dbService->expects($this->once())            ->method('createDatabase')            ->with($this->equalTo($dbName));        $commandTester->execute([            'command' => $command->getName(),            'dbName' => $dbName,        ]);        $output = $commandTester->getDisplay();        $this->assertStringContainsString('Database created successfully', $output);    }    public function testExecuteWithException()    {        $application = new Application();        $application->add(new CreateDatabaseCommand($this->dbService));        $command = $application->find('tenant:database:create');        $commandTester = new CommandTester($command);        $dbName = 'test_db';        $exceptionMessage = 'Error creating database';        $this->dbService->expects($this->once())            ->method('createDatabase')            ->with($this->equalTo($dbName))            ->willThrowException(new \Exception($exceptionMessage));        $commandTester->execute([            'command' => $command->getName(),            'dbName' => $dbName,        ]);        $output = $commandTester->getDisplay();        $this->assertStringContainsString($exceptionMessage, $output);    }}